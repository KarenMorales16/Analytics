library(ggplot2)
library(plotly)
library(dplyr)
library(dbplyr)
library(sqldf)
library(shiny)
library(DT)
library(shinydashboard)
library(sf)

# or in global.R
genders <- c("Ene", "Feb")

# Define UI
ui <- dashboardPage(
  
  dashboardHeader(),
  dashboardSidebar(  
    
    fluidPage(
    
    fileInput('target_upload', 'Choose file to upload',
              accept = c(
                'text/csv',
                'text/comma-separated-values',
                '.csv')
              ),
    

    

    
  #Using the javaScript Shiny on Input Change function to restore the input value.
  tags$script(' 
  
  document.getElementById("target_upload").onclick = function() {
  var number = Math.random();
  
  }; 
    
  Shiny.addCustomMessageHandler("myCallbackHandler",
  function(color) {
   Shiny.onInputChange("mydata", color);
  });
        
 ')  ,verbatimTextOutput("results")
  )
  ),
  
  dashboardBody(
    DT::dataTableOutput("sample_table")

)


)



# Define server logic
server <- shinyServer(function(input, output,  session) {
  
  
  observe({
    input$mydata
    color = genders
    session$sendCustomMessage(type = "myCallbackHandler", color)
  })
  
  
  
  output$results <- renderPrint({
    input$mydata
  })
  


  
   output$sample_table<- DT::renderDataTable({
    df <- df_products_upload()
    
    DT::datatable(df)
    
  })
  
  
    
    df_products_upload <- reactive({
        inFile <- input$target_upload
        if (is.null(inFile))
            return(NULL)
        
        df <- read.csv(inFile$datapath, header = TRUE)
        'return(df)'
       
        MesF<-df$Mes.Fiscal
        MesF[grepl("N/A", MesF)] <- NA
        MesF[MesF ==""] <- NA
        
        Bss <-df$BSS..
        Bss[grepl("N/A", Bss)] <- NA
        Bss[Bss ==""] <- NA
        
        
        Tss <-df$TSS..
        Tss[grepl("N/A", Tss)] <- NA
        Tss[Tss ==""] <- NA
        
        Edge <-df$Edge.Bonding..
        Edge[grepl("N/A", Edge)] <- NA
        Edge[Edge ==""] <- NA
        
        THT <-df$THT..
        THT[grepl("N/A", THT)] <- NA
        THT[THT ==""] <- NA
        
        
        
        Thic <-df$Thick.CC..
        Thic[grepl("N/A", Thic)] <- NA
        Thic[Thic ==""] <- NA
        
        
        AFA <-df$AFA..
        AFA[grepl("N/A", AFA)] <- NA
        AFA[AFA ==""] <- NA
    
        
        BRK <-df$Braket..
        BRK[grepl("N/A", BRK)] <- NA
        BRK[BRK ==""] <- NA
        
        Phase <-df$Phase
        Phase[grepl("N/A", Phase)] <- NA
        Phase[Phase ==""] <- NA
        
        
        
        data = data.frame(  Mes_Fiscal = MesF, Bss = Bss , Tss = Tss,Edge=Edge, THT= THT,Thic= Thic,  AFA= AFA, BRK= BRK, Phase= Phase )
        
        genders=sqldf("SELECT  Mes_Fiscal FROM data where Mes_Fiscal is not Null group by Mes_Fiscal ")

      
     
        return(data)
        
 
        
    
    })
    
    
    
    

    
    
}
)

# Run the application 
shinyApp(ui = ui, server = server)
